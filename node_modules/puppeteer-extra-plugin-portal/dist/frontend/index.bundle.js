/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/index.css":
/*!*************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/index.css ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _img_navigationControls_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./img/navigationControls.png */ "./src/img/navigationControls.png");
// Imports




var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(_img_navigationControls_png__WEBPACK_IMPORTED_MODULE_3__.default);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\n* {\n  font-family: Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace;\n}\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nbody {\n  line-height: 1;\n}\n\nol,\nul {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: '';\n  content: none;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nhtml {\n  color: #ccc;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  position: fixed;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n  border: 0;\n  background: rgb(21, 21, 21);\n  display: flex;\n  flex-direction: column;\n}\n\n\n\nheader {\n  height: 50px;\n  padding: 10px 30px;\n  border-bottom: 1px solid #333;\n  display: flex;\n  justify-content: space-between;\n  flex-shrink: initial;\n  align-items: center;\n}\n\nheader .group {\n  display: flex;\n  align-items: center;\n}\n\nheader .group>* {\n  margin-left: 10px;\n}\n\nheader .group>*:not(:last-child) {\n  margin-right: 10px;\n}\n\nmain {\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n}\n\n\n#runner {\n  position: relative;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n}\n\n#viewer,\n#devtools {\n  display: flex;\n  flex: 1;\n}\n\n#devtools iframe {\n  border: none;\n  overflow: hidden;\n  width: 100%;\n}\n\n/* https://github.com/ChromeDevTools/devtools-frontend/blob/ca17a55104e6baf8d4ab360b484111bfa93c9b7f/front_end/panels/screencast/screencastView.css#L35 */\n.flex-auto {\n  flex: auto;\n}\n\n.vbox {\n  display: flex;\n  flex-direction: column !important;\n  position: relative;\n}\n\n.widget {\n  position: relative;\n  flex: auto;\n  contain: style;\n}\n\n.screencast-navigation {\n  flex-direction: row;\n  display: flex;\n  flex: 24px 0 0;\n  position: relative;\n  padding-left: 1px;\n  background-origin: padding-box;\n  background-clip: padding-box;\n}\n\n.screencast-navigation button {\n  border-radius: 2px;\n  background-color: transparent;\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");\n  background-clip: content-box;\n  background-origin: content-box;\n  background-repeat: no-repeat;\n  border: 1px solid transparent;\n  height: 23px;\n  padding: 2px;\n  width: 23px;\n}\n\n.screencast-navigation button:hover,\n.screencast-navigation button:focus {\n  border-color: rgb(17, 119, 187);\n}\n\n.screencast-navigation button:active {\n  border-color: rgb(200, 200, 200);\n}\n\n.screencast-navigation button.back {\n  background-position-x: -1px;\n}\n\n.screencast-navigation button.forward {\n  background-position-x: -18px;\n}\n\n.screencast-navigation button.reload {\n  background-position-x: -37px;\n}", "",{"version":3,"sources":["webpack://./src/index.css"],"names":[],"mappings":"AAAA;;;CAGC;;AAED;EACE,iOAAiO;AACnO;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiFE,SAAS;EACT,UAAU;EACV,SAAS;EACT,eAAe;EACf,aAAa;EACb,wBAAwB;AAC1B;;AAEA,gDAAgD;AAChD;;;;;;;;;;;EAWE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;;EAEE,YAAY;AACd;;AAEA;;;;EAIE,WAAW;EACX,aAAa;AACf;;AAEA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,WAAW;EACX,MAAM;EACN,OAAO;EACP,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,SAAS;EACT,2BAA2B;EAC3B,aAAa;EACb,sBAAsB;AACxB;;;;AAIA;EACE,YAAY;EACZ,kBAAkB;EAClB,6BAA6B;EAC7B,aAAa;EACb,8BAA8B;EAC9B,oBAAoB;EACpB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,OAAO;EACP,mBAAmB;AACrB;;;AAGA;EACE,kBAAkB;EAClB,aAAa;EACb,OAAO;EACP,sBAAsB;AACxB;;AAEA;;EAEE,aAAa;EACb,OAAO;AACT;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,WAAW;AACb;;AAEA,yJAAyJ;AACzJ;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,iCAAiC;EACjC,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,cAAc;AAChB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,cAAc;EACd,kBAAkB;EAClB,iBAAiB;EACjB,8BAA8B;EAC9B,4BAA4B;AAC9B;;AAEA;EACE,kBAAkB;EAClB,6BAA6B;EAC7B,yDAAmD;EACnD,4BAA4B;EAC5B,8BAA8B;EAC9B,4BAA4B;EAC5B,6BAA6B;EAC7B,YAAY;EACZ,YAAY;EACZ,WAAW;AACb;;AAEA;;EAEE,+BAA+B;AACjC;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,4BAA4B;AAC9B","sourcesContent":["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\n* {\n  font-family: Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace;\n}\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nbody {\n  line-height: 1;\n}\n\nol,\nul {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: '';\n  content: none;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nhtml {\n  color: #ccc;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  position: fixed;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n  border: 0;\n  background: rgb(21, 21, 21);\n  display: flex;\n  flex-direction: column;\n}\n\n\n\nheader {\n  height: 50px;\n  padding: 10px 30px;\n  border-bottom: 1px solid #333;\n  display: flex;\n  justify-content: space-between;\n  flex-shrink: initial;\n  align-items: center;\n}\n\nheader .group {\n  display: flex;\n  align-items: center;\n}\n\nheader .group>* {\n  margin-left: 10px;\n}\n\nheader .group>*:not(:last-child) {\n  margin-right: 10px;\n}\n\nmain {\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n}\n\n\n#runner {\n  position: relative;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n}\n\n#viewer,\n#devtools {\n  display: flex;\n  flex: 1;\n}\n\n#devtools iframe {\n  border: none;\n  overflow: hidden;\n  width: 100%;\n}\n\n/* https://github.com/ChromeDevTools/devtools-frontend/blob/ca17a55104e6baf8d4ab360b484111bfa93c9b7f/front_end/panels/screencast/screencastView.css#L35 */\n.flex-auto {\n  flex: auto;\n}\n\n.vbox {\n  display: flex;\n  flex-direction: column !important;\n  position: relative;\n}\n\n.widget {\n  position: relative;\n  flex: auto;\n  contain: style;\n}\n\n.screencast-navigation {\n  flex-direction: row;\n  display: flex;\n  flex: 24px 0 0;\n  position: relative;\n  padding-left: 1px;\n  background-origin: padding-box;\n  background-clip: padding-box;\n}\n\n.screencast-navigation button {\n  border-radius: 2px;\n  background-color: transparent;\n  background-image: url('img/navigationControls.png');\n  background-clip: content-box;\n  background-origin: content-box;\n  background-repeat: no-repeat;\n  border: 1px solid transparent;\n  height: 23px;\n  padding: 2px;\n  width: 23px;\n}\n\n.screencast-navigation button:hover,\n.screencast-navigation button:focus {\n  border-color: rgb(17, 119, 187);\n}\n\n.screencast-navigation button:active {\n  border-color: rgb(200, 200, 200);\n}\n\n.screencast-navigation button.back {\n  background-position-x: -1px;\n}\n\n.screencast-navigation button.forward {\n  background-position-x: -18px;\n}\n\n.screencast-navigation button.reload {\n  background-position-x: -37px;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join("");
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === "string") {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, ""]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/cssWithMappingToString.js ***!
  \************************************************************************/
/***/ ((module) => {



function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

module.exports = function cssWithMappingToString(item) {
  var _item = _slicedToArray(item, 4),
      content = _item[1],
      cssMapping = _item[3];

  if (typeof btoa === "function") {
    // eslint-disable-next-line no-undef
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {



module.exports = function (url, options) {
  if (!options) {
    // eslint-disable-next-line no-param-reassign
    options = {};
  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign


  url = url && url.__esModule ? url.default : url;

  if (typeof url !== "string") {
    return url;
  } // If url is already wrapped in quotes, remove them


  if (/^['"].*['"]$/.test(url)) {
    // eslint-disable-next-line no-param-reassign
    url = url.slice(1, -1);
  }

  if (options.hash) {
    // eslint-disable-next-line no-param-reassign
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./src/img/navigationControls.png":
/*!****************************************!*\
  !*** ./src/img/navigationControls.png ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "dcc2df6f8ef0c4fa8076d46d2b1bd52f.png");

/***/ }),

/***/ "./src/index.css":
/*!***********************!*\
  !*** ./src/index.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./index.css */ "./node_modules/css-loader/dist/cjs.js!./src/index.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./src/api.ts":
/*!********************!*\
  !*** ./src/api.ts ***!
  \********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getConnectURL = exports.getTargetId = exports.getWebSocketURL = exports.getBaseURL = void 0;
var getBaseURL = function () {
    var baseURL = window.location.href;
    return new URL(baseURL);
};
exports.getBaseURL = getBaseURL;
var getWebSocketURL = function () {
    var baseURL = exports.getBaseURL();
    var wsProtocol = baseURL.protocol === 'https:' ? 'wss:' : 'ws:';
    var targetId = baseURL.searchParams.get('targetId');
    var wsUrl = new URL("" + wsProtocol + baseURL.host + baseURL.pathname + "ws/" + targetId);
    return wsUrl;
};
exports.getWebSocketURL = getWebSocketURL;
var getTargetId = function () {
    var baseURL = exports.getBaseURL();
    var targetId = baseURL.searchParams.get('targetId');
    if (!targetId)
        throw new Error('Missing targetId in URL');
    return targetId;
};
exports.getTargetId = getTargetId;
var getConnectURL = function () {
    var wsURL = exports.getWebSocketURL();
    console.log('wsURL', wsURL);
    return wsURL.href;
};
exports.getConnectURL = getConnectURL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBTyxJQUFNLFVBQVUsR0FBRztJQUN4QixJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQUNyQyxPQUFPLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUhXLFFBQUEsVUFBVSxjQUdyQjtBQUVLLElBQU0sZUFBZSxHQUFHO0lBQzdCLElBQU0sT0FBTyxHQUFHLGtCQUFVLEVBQUUsQ0FBQztJQUM3QixJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDbEUsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEQsSUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBRyxVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxXQUFNLFFBQVUsQ0FBQyxDQUFDO0lBQ3ZGLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBTlcsUUFBQSxlQUFlLG1CQU0xQjtBQUVLLElBQU0sV0FBVyxHQUFHO0lBQ3pCLElBQU0sT0FBTyxHQUFHLGtCQUFVLEVBQUUsQ0FBQztJQUM3QixJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0RCxJQUFJLENBQUMsUUFBUTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMxRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUM7QUFMVyxRQUFBLFdBQVcsZUFLdEI7QUFFSyxJQUFNLGFBQWEsR0FBRztJQUMzQixJQUFNLEtBQUssR0FBRyx1QkFBZSxFQUFFLENBQUM7SUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3BCLENBQUMsQ0FBQztBQUpXLFFBQUEsYUFBYSxpQkFJeEIifQ==

/***/ }),

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var runner_1 = __importDefault(__webpack_require__(/*! ./runner */ "./src/runner.ts"));
var App = (function () {
    function App() {
        var _this = this;
        this.$runnerMount = document.querySelector('#runner');
        this.onRunnerComplete = function (showMessage) {
            if (showMessage === void 0) { showMessage = true; }
            _this.runner = undefined;
            if (showMessage) {
                _this.$runnerMount.innerHTML = "\n      " + _this.$runnerMount.innerHTML + "\n      <div class=\"fixed-message\">\n        <code>Session complete</code>\n      </div>\n      ";
            }
        };
        this.run = function () { return __awaiter(_this, void 0, void 0, function () {
            var $mount, onClose;
            return __generator(this, function (_a) {
                if (this.runner) {
                    this.runner.close(false);
                }
                $mount = this.$runnerMount;
                onClose = this.onRunnerComplete;
                this.runner = new runner_1.default({ $mount: $mount, onClose: onClose });
                return [2];
            });
        }); };
        this.run();
    }
    return App;
}());
exports.default = App;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9EQUE4QjtBQUU5QjtJQUtFO1FBQUEsaUJBRUM7UUFOTyxpQkFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFnQixDQUFDO1FBUXhFLHFCQUFnQixHQUFHLFVBQUMsV0FBa0I7WUFBbEIsNEJBQUEsRUFBQSxrQkFBa0I7WUFDcEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFFeEIsSUFBSSxXQUFXLEVBQUU7Z0JBQ2YsS0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsYUFDNUIsS0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLHVHQUk1QixDQUFDO2FBQ0g7UUFDSCxDQUFDLENBQUM7UUFFRixRQUFHLEdBQUc7OztnQkFDSixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzFCO2dCQUNLLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO2dCQUV0QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxFQUFFLE1BQU0sUUFBQSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQzs7O2FBQy9DLENBQUM7UUF4QkEsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQXdCSCxVQUFDO0FBQUQsQ0FBQyxBQS9CRCxJQStCQyJ9

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(/*! ./index.css */ "./src/index.css");
var app_1 = __importDefault(__webpack_require__(/*! ./app */ "./src/app.ts"));
new app_1.default();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1QkFBcUI7QUFDckIsOENBQXdCO0FBR3hCLElBQUksYUFBRyxFQUFFLENBQUMifQ==

/***/ }),

/***/ "./src/runner.ts":
/*!***********************!*\
  !*** ./src/runner.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var util_1 = __webpack_require__(/*! ./util */ "./src/util.ts");
var api_1 = __webpack_require__(/*! ./api */ "./src/api.ts");
var types_1 = __webpack_require__(/*! ./types */ "./src/types.ts");
var runnerHTML = "\n<div id=\"viewer\">\n  <canvas id=\"screencast\"></canvas>\n</div>";
var errorHTML = function (error) {
    return "<div class=\"fixed-message\"><code style=\"color: red\">" + error.toString() + "</code></div>";
};
var Runner = (function () {
    function Runner(_a) {
        var _this = this;
        var $mount = _a.$mount, onClose = _a.onClose;
        this.img = new Image();
        this.started = false;
        this.onVerticalResize = function (evt) {
            evt.preventDefault();
            _this.$mount.style.pointerEvents = 'none';
            _this.$viewer.style.flex = 'initial';
            var onMouseMove = function (moveEvent) {
                if (moveEvent.buttons === 0) {
                    return;
                }
                _this.$viewer.style.height = moveEvent.clientY - 71 + "px";
                _this.$canvas.height = moveEvent.clientY - 71;
            };
            var onMouseUp = function () {
                _this.$mount.style.pointerEvents = 'initial';
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
                onMouseMove = null;
                onMouseUp = null;
                _this.resizePage();
            };
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        };
        this.emitMouse = function (evt) {
            var buttons = { 0: 'none', 1: 'left', 2: 'middle', 3: 'right' };
            var event = evt.type === 'mousewheel' ? window.event || evt : evt;
            var types = {
                mousedown: 'mousePressed',
                mouseup: 'mouseReleased',
                mousewheel: 'mouseWheel',
                touchstart: 'mousePressed',
                touchend: 'mouseReleased',
                touchmove: 'mouseWheel',
                mousemove: 'mouseMoved',
            };
            if (!(event.type in types)) {
                return;
            }
            if (event.type !== 'mousewheel' &&
                buttons[event.which] === 'none' &&
                event.type !== 'mousemove') {
                return;
            }
            var type = types[event.type];
            var isScroll = type.indexOf('wheel') !== -1;
            var x = isScroll ? event.clientX : event.offsetX;
            var y = isScroll ? event.clientY : event.offsetY;
            var data = {
                type: types[event.type],
                x: x,
                y: y,
                modifiers: Runner.getModifiersForEvent(event),
                button: event.type === 'mousewheel' ? 'none' : buttons[event.which],
                clickCount: 1,
            };
            if (event.type === 'mousewheel') {
                data.deltaX = event.wheelDeltaX || 0;
                data.deltaY = event.wheelDeltaY || event.wheelDelta;
            }
            _this.puppeteerWorker.postMessage({
                command: types_1.ProtocolCommands['Input.emulateTouchFromMouseEvent'],
                data: data,
            });
        };
        this.emitKeyEvent = function (event) {
            var type;
            if (event.keyCode === 8) {
                event.preventDefault();
            }
            switch (event.type) {
                case 'keydown':
                    type = 'keyDown';
                    break;
                case 'keyup':
                    type = 'keyUp';
                    break;
                case 'keypress':
                    type = 'char';
                    break;
                default:
                    return;
            }
            var text = type === 'char' ? String.fromCharCode(event.charCode) : undefined;
            var data = {
                type: type,
                text: text,
                unmodifiedText: text ? text.toLowerCase() : undefined,
                keyIdentifier: event.keyIdentifier,
                code: event.code,
                key: event.key,
                windowsVirtualKeyCode: event.keyCode,
                nativeVirtualKeyCode: event.keyCode,
                autoRepeat: false,
                isKeypad: false,
                isSystemKey: false,
            };
            _this.puppeteerWorker.postMessage({
                command: types_1.ProtocolCommands['Input.dispatchKeyEvent'],
                data: data,
            });
        };
        this.doReload = function () {
            _this.puppeteerWorker.postMessage({
                command: types_1.ProtocolCommands['Page.reload'],
            });
        };
        this.onScreencastFrame = function (data) {
            _this.img.onload = function () {
                console.log('Runner onScreencastFrame onload, ctx:', _this.ctx);
                _this.ctx.drawImage(_this.img, 0, 0, _this.$canvas.width, _this.$canvas.height);
            };
            _this.img.src = "data:image/png;base64," + data;
        };
        this.bindKeyEvents = function () {
            document.body.addEventListener('keydown', _this.emitKeyEvent, true);
            document.body.addEventListener('keyup', _this.emitKeyEvent, true);
            document.body.addEventListener('keypress', _this.emitKeyEvent, true);
        };
        this.unbindKeyEvents = function () {
            document.body.removeEventListener('keydown', _this.emitKeyEvent, true);
            document.body.removeEventListener('keyup', _this.emitKeyEvent, true);
            document.body.removeEventListener('keypress', _this.emitKeyEvent, true);
        };
        this.addListeners = function () {
            _this.$canvas.addEventListener('mousedown', _this.emitMouse, false);
            _this.$canvas.addEventListener('mouseup', _this.emitMouse, false);
            _this.$canvas.addEventListener('mousewheel', _this.emitMouse, false);
            _this.$canvas.addEventListener('mousemove', _this.emitMouse, false);
            _this.$canvas.addEventListener('mouseenter', _this.bindKeyEvents, false);
            _this.$canvas.addEventListener('mouseleave', _this.unbindKeyEvents, false);
            window.addEventListener('resize', _this.resizePage);
            var reloadButton = document.getElementById('reload-button');
            if (reloadButton)
                reloadButton.addEventListener('click', _this.doReload, false);
        };
        this.removeEventListeners = function () {
            if (!_this.started)
                return;
            _this.$canvas.removeEventListener('mousedown', _this.emitMouse, false);
            _this.$canvas.removeEventListener('mouseup', _this.emitMouse, false);
            _this.$canvas.removeEventListener('mousewheel', _this.emitMouse, false);
            _this.$canvas.removeEventListener('mousemove', _this.emitMouse, false);
            _this.$canvas.removeEventListener('mouseenter', _this.bindKeyEvents, false);
            _this.$canvas.removeEventListener('mouseleave', _this.unbindKeyEvents, false);
            window.removeEventListener('resize', _this.resizePage);
        };
        this.resizePage = util_1.debounce(function () {
            var _a = _this.$viewer.getBoundingClientRect(), width = _a.width, height = _a.height;
            _this.$canvas.width = width;
            _this.$canvas.height = height;
            _this.sendWorkerMessage({
                command: 'setViewport',
                data: {
                    width: Math.floor(width),
                    height: Math.floor(height),
                    deviceScaleFactor: 1,
                },
            });
        }, 500);
        this.close = util_1.once(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.onClose.apply(_this, args);
            _this.sendWorkerMessage({ command: types_1.HostCommands.close, data: null });
            _this.removeEventListeners();
            _this.unbindKeyEvents();
        });
        this.showError = function (err) {
            _this.$mount.innerHTML = "" + errorHTML(err);
        };
        this.sendWorkerMessage = function (message) {
            _this.puppeteerWorker.postMessage(message);
        };
        this.onWorkerSetupComplete = function (payload) {
            var targetId = payload.targetId;
            _this.started = true;
            _this.$mount.innerHTML = runnerHTML;
            _this.$viewer = document.querySelector('#viewer');
            _this.$canvas = document.querySelector('#screencast');
            _this.ctx = _this.$canvas.getContext('2d');
            _this.addListeners();
            _this.resizePage();
        };
        this.setupPuppeteerWorker = function () {
            _this.puppeteerWorker = new Worker('./puppeteer.worker.bundle.js');
            _this.puppeteerWorker.addEventListener('message', function (evt) {
                var _a = evt.data, command = _a.command, data = _a.data;
                if (command === types_1.WorkerCommands.startComplete) {
                    return _this.onWorkerSetupComplete(data);
                }
                if (command === types_1.WorkerCommands.screencastFrame) {
                    return _this.onScreencastFrame(data);
                }
                if (command === types_1.WorkerCommands.error) {
                    return _this.showError(data);
                }
                if (command === types_1.WorkerCommands.browserClose) {
                    return _this.showError("Session complete! Browser has closed.");
                }
            });
            _this.puppeteerWorker.addEventListener('error', function (_a) {
                var message = _a.message;
                _this.puppeteerWorker.terminate();
                return _this.showError("Error communicating with puppeteer-worker " + message);
            });
            _this.sendWorkerMessage({
                command: 'start',
                data: {
                    browserWSEndpoint: api_1.getConnectURL(),
                    quality: 100,
                    targetId: api_1.getTargetId(),
                },
            });
        };
        this.$mount = $mount;
        this.onClose = onClose;
        this.setupPuppeteerWorker();
    }
    Runner.getModifiersForEvent = function (event) {
        return ((event.altKey ? 1 : 0) |
            (event.ctrlKey ? 2 : 0) |
            (event.metaKey ? 4 : 0) |
            (event.shiftKey ? 8 : 0));
    };
    return Runner;
}());
exports.default = Runner;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkerCommands = exports.HostCommands = exports.ProtocolCommands = void 0;
var ProtocolCommands;
(function (ProtocolCommands) {
    ProtocolCommands["Input.dispatchKeyEvent"] = "Input.dispatchKeyEvent";
    ProtocolCommands["Input.emulateTouchFromMouseEvent"] = "Input.emulateTouchFromMouseEvent";
    ProtocolCommands["Page.reload"] = "Page.reload";
    ProtocolCommands["Page.navigateToHistoryEntry"] = "Page.navigateToHistoryEntry";
})(ProtocolCommands = exports.ProtocolCommands || (exports.ProtocolCommands = {}));
var HostCommands;
(function (HostCommands) {
    HostCommands["start"] = "start";
    HostCommands["run"] = "run";
    HostCommands["close"] = "close";
    HostCommands["setViewport"] = "setViewport";
})(HostCommands = exports.HostCommands || (exports.HostCommands = {}));
var WorkerCommands;
(function (WorkerCommands) {
    WorkerCommands["startComplete"] = "startComplete";
    WorkerCommands["runComplete"] = "runComplete";
    WorkerCommands["screencastFrame"] = "screencastFrame";
    WorkerCommands["browserClose"] = "browserClose";
    WorkerCommands["error"] = "error";
})(WorkerCommands = exports.WorkerCommands || (exports.WorkerCommands = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsSUFBWSxnQkFLWDtBQUxELFdBQVksZ0JBQWdCO0lBQzFCLHFFQUFtRCxDQUFBO0lBQ25ELHlGQUF1RSxDQUFBO0lBQ3ZFLCtDQUE2QixDQUFBO0lBQzdCLCtFQUE2RCxDQUFBO0FBQy9ELENBQUMsRUFMVyxnQkFBZ0IsR0FBaEIsd0JBQWdCLEtBQWhCLHdCQUFnQixRQUszQjtBQUVELElBQVksWUFLWDtBQUxELFdBQVksWUFBWTtJQUN0QiwrQkFBaUIsQ0FBQTtJQUNqQiwyQkFBYSxDQUFBO0lBQ2IsK0JBQWlCLENBQUE7SUFDakIsMkNBQTZCLENBQUE7QUFDL0IsQ0FBQyxFQUxXLFlBQVksR0FBWixvQkFBWSxLQUFaLG9CQUFZLFFBS3ZCO0FBRUQsSUFBWSxjQU1YO0FBTkQsV0FBWSxjQUFjO0lBQ3hCLGlEQUFpQyxDQUFBO0lBQ2pDLDZDQUE2QixDQUFBO0lBQzdCLHFEQUFxQyxDQUFBO0lBQ3JDLCtDQUErQixDQUFBO0lBQy9CLGlDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFOVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQU16QiJ9

/***/ }),

/***/ "./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.once = exports.debounce = void 0;
function debounce(func, waitMilliseconds, options) {
    var _a;
    if (waitMilliseconds === void 0) { waitMilliseconds = 50; }
    if (options === void 0) { options = {}; }
    var timeoutId;
    var isImmediate = (_a = options.isImmediate) !== null && _a !== void 0 ? _a : false;
    var maxWait = options.maxWait;
    var lastInvokeTime = Date.now();
    function nextInvokeTimeout() {
        if (maxWait !== undefined) {
            var timeSinceLastInvocation = Date.now() - lastInvokeTime;
            if (timeSinceLastInvocation + waitMilliseconds >= maxWait) {
                return maxWait - timeSinceLastInvocation;
            }
        }
        return waitMilliseconds;
    }
    var debouncedFunction = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var invokeFunction = function () {
            timeoutId = undefined;
            lastInvokeTime = Date.now();
            if (!isImmediate) {
                func.apply(_this, args);
            }
        };
        var shouldCallNow = isImmediate && timeoutId === undefined;
        if (timeoutId !== undefined) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(invokeFunction, nextInvokeTimeout());
        if (shouldCallNow) {
            func.apply(this, args);
        }
    };
    debouncedFunction.cancel = function cancel() {
        if (timeoutId !== undefined) {
            clearTimeout(timeoutId);
        }
    };
    return debouncedFunction;
}
exports.debounce = debounce;
var once = function (fn) {
    var done = false;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return done ? undefined : ((done = true), fn.apply(this, args));
    };
};
exports.once = once;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVlBLFNBQWdCLFFBQVEsQ0FDdEIsSUFBTyxFQUNQLGdCQUFxQixFQUNyQixPQUFxQjs7SUFEckIsaUNBQUEsRUFBQSxxQkFBcUI7SUFDckIsd0JBQUEsRUFBQSxZQUFxQjtJQUVyQixJQUFJLFNBQW9ELENBQUM7SUFDekQsSUFBTSxXQUFXLEdBQUcsTUFBQSxPQUFPLENBQUMsV0FBVyxtQ0FBSSxLQUFLLENBQUM7SUFDekMsSUFBQSxPQUFPLEdBQUssT0FBTyxRQUFaLENBQWE7SUFDNUIsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRWhDLFNBQVMsaUJBQWlCO1FBQ3hCLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN6QixJQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxjQUFjLENBQUM7WUFFNUQsSUFBSSx1QkFBdUIsR0FBRyxnQkFBZ0IsSUFBSSxPQUFPLEVBQUU7Z0JBQ3pELE9BQU8sT0FBTyxHQUFHLHVCQUF1QixDQUFDO2FBQzFDO1NBQ0Y7UUFFRCxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7SUFHRCxJQUFNLGlCQUFpQixHQUFHO1FBQUEsaUJBb0J6QjtRQXBCK0QsY0FBc0I7YUFBdEIsVUFBc0IsRUFBdEIscUJBQXNCLEVBQXRCLElBQXNCO1lBQXRCLHlCQUFzQjs7UUFDcEYsSUFBTSxjQUFjLEdBQUc7WUFDckIsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUN0QixjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ3hCO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsSUFBTSxhQUFhLEdBQUcsV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLENBQUM7UUFFN0QsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQzNCLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN6QjtRQUVELFNBQVMsR0FBRyxVQUFVLENBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztRQUU1RCxJQUFJLGFBQWEsRUFBRTtZQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUMsQ0FBQztJQUVGLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxTQUFTLE1BQU07UUFDeEMsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQzNCLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN6QjtJQUNILENBQUMsQ0FBQztJQUVGLE9BQU8saUJBQWlCLENBQUM7QUFDM0IsQ0FBQztBQXBERCw0QkFvREM7QUFFTSxJQUFNLElBQUksR0FBRyxVQUNsQixFQUE2QjtJQUU3QixJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7SUFFakIsT0FBTztRQUFtQixjQUFVO2FBQVYsVUFBVSxFQUFWLHFCQUFVLEVBQVYsSUFBVTtZQUFWLHlCQUFVOztRQUVsQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBVFcsUUFBQSxJQUFJLFFBU2YifQ==

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,